#!/usr/bin/env python

from __future__ import print_function
__author__ = 'adam'

import argparse
import git
import json
import os
import shutil


# Paths.
CONF_ROOT = os.path.dirname(os.path.realpath(__file__))
CONFIGURATION_FILE = os.path.join(CONF_ROOT, 'configuration.json')
HOME_DIR = os.path.expanduser('~')
FILE_DIR = os.path.join(CONF_ROOT, 'files')
BACKUP_DIR = os.path.join(CONF_ROOT, 'backup')

def load_config(config_path):
    """ Load configuration JSON file. """
    with open(config_path) as fp:
        config = json.load(fp)['dotfiles']

    for item in config:
        # Expand home directories if required.
        item['root'] = os.path.expanduser(item['root'])

        # Make paths to files and directories absolute.
        if 'dirs' in item:
            item['dirs'] = [os.path.join(item['root'], dp)
                            for dp in item['dirs']]
        else:
            item['dirs'] = []
        if 'files' in item:
            item['files'] = [os.path.join(item['root'], fp)
                             for fp in item['files']]
        else:
            item['files'] = []
        if not 'repos' in item:
            item['repos'] = []
    return config

def clean(types, config):
    """ Remove the configuration files from the repo. """

    # Remove individual file type directories.
    for item in config:
        if item['type'] in types:
            try:
                shutil.rmtree(os.path.join(FILE_DIR, item['type']))
            except OSError:
                pass

    # If the file directory is now empty, get rid of that too.
    if os.path.isdir(FILE_DIR) and len(os.listdir(FILE_DIR)) == 0:
        shutil.rmtree(FILE_DIR)

def copy(types, to_dir, config):
    """ Copy files from the local machine to the repo. """
    if len(types) == 0:
        return

    os.mkdir(to_dir)
    for item in config:
        if item['type'] not in types:
            continue
        item_dir = os.path.join(to_dir, item['type'])
        os.mkdir(item_dir)
        for fp in item['files']:
            if os.path.exists(fp):
                shutil.copy(fp, item_dir)
            else:
                print('Did not find {}.'.format(fp))
        for dp in item['dirs']:
            if os.path.exists(dp):
                shutil.copytree(dp, os.path.join(item_dir,
                                                 dp.split(os.path.sep)[-1])) # FIXME
            else:
                print('Did not find {}.'.format(dp))

def paste(types, config):
    """ Paste configuration files into the correct places on the system. """
    if len(types) == 0:
        return

    for item in config:
        if item['type'] not in types:
            continue
        item_dir = os.path.join(FILE_DIR, item['type'])
        for fp in item['files']:
            file_name = fp.split(os.path.sep)[-1] # FIXME
            shutil.copy(os.path.join(item_dir, file_name), fp)
        for dp in item['dirs']:
            dir_name = dp.split(os.path.sep)[-1] # FIXME
            if os.path.isdir(dp):
                shutil.rmtree(dp)
            shutil.copytree(os.path.join(item_dir, dir_name), dp)
        for repo in item['repos']:
            repo_dir = os.path.join(item['root'], repo['dir'])
            if os.path.isdir(repo_dir):
                shutil.rmtree(repo_dir)
            git_repo = git.Repo().clone_from(repo['url'], repo_dir)
            git_repo.submodule_update()

def backup(types, config):
    """ Back up files in a separate directory. """
    if os.path.isdir(BACKUP_DIR):
        shutil.rmtree(BACKUP_DIR)
    copy(types, BACKUP_DIR, config)

def install(files):
    """ Install useful tools. """
    print('Not currently implemented.')

def types_to_configure(only_files, not_files, config):
    """ Determine which files to operate on. """

    # Types to be included exclusively.
    if only_files:
        only_files = set(only_files.split(' '))
    else:
        only_files = set()

    # Types to be excluded.
    if not_files:
        not_files = set(not_files.split(' '))
    else:
        not_files = set()

    # All possible types.
    types = set()
    for item in config:
        types.add(item['type'])

    if len(only_files) > 0:
        return only_files
    else:
        return types - not_files

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('command', help="Command to perform. Can be one of"
                        " 'clean', 'copy', or 'paste'.")
    parser.add_argument('--not', help='File types to exclude.',
                        dest='not_files')
    parser.add_argument('--only', help='Only include these file types.',
                        dest='only_files')
    args = parser.parse_args()

    config = load_config(CONFIGURATION_FILE)
    types = types_to_configure(args.only_files, args.not_files, config)

    command = args.command
    if command == 'clean':
        clean(types, config)
        print('Configuration cleaned.')
    elif command == 'copy':
        clean(types, config)
        copy(types, FILE_DIR, config)
        print('Configuration copied.')
    elif command == 'paste':
        prompt = raw_input('Are you sure you want to overwrite your'
                           + ' configuration? [y/N] ')
        if prompt.upper() == 'Y' or prompt.upper() == 'YES':
            backup(types, config)
            paste(types, config)
            print('Configuration pasted.')
        else:
            print('Aborted.')
    elif command == 'install':
        install(types)
    else:
        print('Unrecognized command.')

if __name__ == '__main__':
    main()

